'''
Real-Time Face Recognition
    ==> Each face in dataset/ must have a unique numeric ID (1, 2, 3, ...)
    ==> Trained LBPH model should be stored in trainer/trainer.yml

Based on original code by Anirban Kar (https://github.com/thecodacus/Face-Recognition)
Enhanced by Marcelo Rovai - MJRoBot.org & Improved for stability
'''

import cv2
import numpy as np
import os

# Load trained model and face detector
recognizer = cv2.face.LBPHFaceRecognizer_create()
recognizer.read('trainer/trainer.yml')
faceCascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# Font for text on video
font = cv2.FONT_HERSHEY_SIMPLEX

# Names corresponding to each ID
# ID=0 is reserved, so start from index 1
names = ['None', 'Samyak', 'User2', 'User3', 'User4']  # <-- customize this

# Initialize webcam
cam = cv2.VideoCapture(0)
cam.set(3, 640)  # width
cam.set(4, 480)  # height

# Minimum window size for detection
minW = 0.1 * cam.get(3)
minH = 0.1 * cam.get(4)

print("\n[INFO] Starting real-time face recognition. Press ESC to exit.\n")

while True:
    ret, img = cam.read()
    if not ret:
        print("[ERROR] Failed to open camera.")
        break

    # Flip horizontally for natural mirror-like effect
    img = cv2.flip(img, 1)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    faces = faceCascade.detectMultiScale(
        gray,
        scaleFactor=1.2,
        minNeighbors=5,
        minSize=(int(minW), int(minH)),
    )

    for (x, y, w, h) in faces:
        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)

        id, confidence = recognizer.predict(gray[y:y + h, x:x + w])

        # Lower confidence means better match
        if confidence < 60:
            name = names[id] if id < len(names) else "Unknown"
            confidence_text = f"  {round(100 - confidence)}%"
        else:
            name = "Unknown"
            confidence_text = f"  {round(100 - confidence)}%"

        # Display name and confidence
        cv2.putText(img, str(name), (x + 5, y - 5), font, 1, (255, 255, 255), 2)
        cv2.putText(img, str(confidence_text), (x + 5, y + h - 5), font, 1, (255, 255, 0), 1)

    cv2.imshow('Camera - Face Recognition', img)

    k = cv2.waitKey(10) & 0xff
    if k == 27:  # ESC to exit
        break

print("\n[INFO] Exiting Program and cleanup ...")
cam.release()
cv2.destroyAllWindows()
