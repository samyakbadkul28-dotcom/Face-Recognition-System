'''
Training Multiple Faces stored on a Database:
    ==> Each face should have a unique numeric integer ID (1, 2, 3, etc.)
    ==> LBPH computed model will be saved in trainer/ directory
    ==> To use PIL, install pillow: pip install pillow

Based on original code by Anirban Kar: https://github.com/thecodacus/Face-Recognition
Developed by Marcelo Rovai - MJRoBot.org @ 21Feb18
'''

import cv2
import numpy as np
from PIL import Image
import os

# Path for face image database
dataset_path = 'dataset'
trainer_dir = 'trainer'

# Ensure trainer directory exists
if not os.path.exists(trainer_dir):
    os.makedirs(trainer_dir)
    print(f"[INFO] Created directory: {trainer_dir}")

# Initialize recognizer and detector
recognizer = cv2.face.LBPHFaceRecognizer_create()
detector = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# Function to get images and label data
def getImagesAndLabels(path):
    imagePaths = [os.path.join(path, f) for f in os.listdir(path)]
    faceSamples = []
    ids = []

    for imagePath in imagePaths:
        if imagePath.endswith('.jpg') or imagePath.endswith('.png'):
            PIL_img = Image.open(imagePath).convert('L')  # grayscale
            img_numpy = np.array(PIL_img, 'uint8')

            # Extract ID from the filename format: User.<id>.<count>.jpg
            try:
                id = int(os.path.split(imagePath)[-1].split(".")[1])
            except:
                print(f"[WARNING] Skipping invalid filename: {imagePath}")
                continue

            faces = detector.detectMultiScale(img_numpy)
            for (x, y, w, h) in faces:
                faceSamples.append(img_numpy[y:y + h, x:x + w])
                ids.append(id)

    return faceSamples, ids

print("\n[INFO] Training faces. Please wait ...")

faces, ids = getImagesAndLabels(dataset_path)
recognizer.train(faces, np.array(ids))

# Save the trained model
trainer_path = os.path.join(trainer_dir, 'trainer.yml')
recognizer.write(trainer_path)

print(f"\n[INFO] {len(np.unique(ids))} unique faces trained and model saved at '{trainer_path}'.")
print("[INFO] Training completed successfully.\n")
